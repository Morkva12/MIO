# GraphicNovelCleaner/13. MangaLocalizer/ui/main_window/RealESRGAN/image_upscaler.py

import os
import glob
import numpy as np
from PIL import Image
from typing import Optional, List, Callable
from multiprocessing import Pool, cpu_count, Manager
from functools import partial
import requests  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ GFPGAN –∏ Real-ESRGAN

import torch  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

from basicsr.archs.rrdbnet_arch import RRDBNet
from basicsr.archs.srvgg_arch import SRVGGNetCompact
from realesrgan import RealESRGANer

# –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ GFPGAN –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü
from gfpgan import GFPGANer

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è upsampler –∏ face_enhancer
upsampler = None
face_enhancer = None
stop_flag = None  # –î–æ–±–∞–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏


def init_worker(model_folder: str, model_name: str, denoise_strength: float,
                outscale: float, tile: int, tile_pad: int, pre_pad: int,
                face_enhance: bool, fp32: bool, alpha_upsampler: str,
                gpu_id: Optional[int], gfpgan_model_path: Optional[str],
                shared_stop_flag):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç RealESRGANer –∏ GFPGANer (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).
    """
    global upsampler
    global face_enhancer
    global stop_flag

    stop_flag = shared_stop_flag  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—â–∏–π —Ñ–ª–∞–≥

    print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –º–æ–¥–µ–ª—å—é {model_name} –Ω–∞ GPU {gpu_id}...")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏
    model_path = os.path.join(model_folder, f'{model_name}.pth')
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –ø–æ –ø—É—Ç–∏: {model_path}")

    if not os.path.isfile(model_path):
        raise FileNotFoundError(f"üö´ –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ {model_folder}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –º–∞—Å—à—Ç–∞–±–∞
    if model_name == 'RealESRGAN_x4plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        netscale = 4
    elif model_name == 'RealESRNet_x4plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        netscale = 4
    elif model_name == 'RealESRGAN_x4plus_anime_6B':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=6, num_grow_ch=32, scale=4)
        netscale = 4
    elif model_name == 'RealESRGAN_x2plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=2)
        netscale = 2
    elif model_name == 'realesr-animevideov3':
        model = SRVGGNetCompact(num_in_ch=3, num_out_ch=3, num_feat=64, num_conv=16, upscale=4, act_type='prelu')
        netscale = 4
    elif model_name == 'realesr-general-x4v3':
        model = SRVGGNetCompact(num_in_ch=3, num_out_ch=3, num_feat=64, num_conv=32, upscale=4, act_type='prelu')
        netscale = 4
    else:
        raise ValueError(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏: {model_name}")

    # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∏–ª—ã —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
    dni_weight: Optional[List[float]] = None
    if model_name == 'realesr-general-x4v3' and denoise_strength != 1:
        wdn_model_name = 'realesr-general-wdn-x4v3'
        wdn_model_path = os.path.join(model_folder, f'{wdn_model_name}.pth')
        if not os.path.isfile(wdn_model_path):
            raise FileNotFoundError(f"üö´ –ú–æ–¥–µ–ª—å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è {wdn_model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ {model_folder}")
        model_path_updated = [model_path, wdn_model_path]
        dni_weight = [denoise_strength, 1 - denoise_strength]
    else:
        model_path_updated = model_path

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RealESRGANer
    try:
        upsampler = RealESRGANer(
            scale=netscale,
            model_path=model_path_updated,
            dni_weight=dni_weight,
            model=model,
            tile=tile,
            tile_pad=tile_pad,
            pre_pad=pre_pad,
            half=not fp32,
            gpu_id=gpu_id,
        )
        print("üñ•Ô∏è RealESRGANer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RealESRGANer: {e}")
        raise e

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GFPGAN –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if face_enhance:
        if gfpgan_model_path is None:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            gfpgan_model_path = os.path.join(model_folder, 'GFPGANv1.3.pth')
        try:
            face_enhancer = GFPGANer(
                model_path=gfpgan_model_path,
                upscale=outscale,
                arch='clean',
                channel_multiplier=2,
                bg_upsampler=upsampler
            )
            print("üñ•Ô∏è GFPGANer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GFPGANer: {e}")
            raise e


def process_single_image(args: tuple, output_path: str, suffix: str, outscale: float, face_enhance: bool):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –ø–æ–≤—ã—à–∞–µ—Ç –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    global upsampler
    global face_enhancer
    global stop_flag

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if stop_flag and stop_flag.value:
        print("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    path, idx = args
    imgname, extension = os.path.splitext(os.path.basename(path))
    print(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ {idx + 1}: {imgname}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PIL –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ NumPy –º–∞—Å—Å–∏–≤
    try:
        img = Image.open(path).convert('RGB')
        img_np = np.array(img)
        print(f"üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {path}: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    if stop_flag and stop_flag.value:
        print("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    try:
        if face_enhance and face_enhancer is not None:
            print("üîç –£–ª—É—á—à–µ–Ω–∏–µ –ª–∏—Ü —Å –ø–æ–º–æ—â—å—é GFPGAN...")
            _, _, output = face_enhancer.enhance(img_np, has_aligned=False, only_center_face=False, paste_back=True)
        else:
            print("‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Real-ESRGAN...")
            output, _ = upsampler.enhance(img_np, outscale=outscale)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è: {imgname}")
    except RuntimeError as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {imgname}: {error}")
        print('üí° –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π CUDA out of memory, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    if stop_flag and stop_flag.value:
        print("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if suffix:
        save_extension = extension[1:] if extension else 'png'
        save_filename = f"{imgname}_{suffix}.{save_extension}"
    else:
        save_extension = extension[1:] if extension else 'png'
        save_filename = f"{imgname}.{save_extension}"

    save_path = os.path.join(output_path, save_filename)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PIL
    try:
        output_img = Image.fromarray(output)
        output_img.save(save_path)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {save_path}: {e}")


def enhance_image(
        input_path: str,
        output_path: str,
        model_folder: str,
        model_name: str = 'RealESRGAN_x4plus_anime_6B',
        denoise_strength: float = 0.5,
        outscale: float = 4.0,
        tile: int = 0,
        tile_pad: int = 10,
        pre_pad: int = 0,
        face_enhance: bool = False,
        fp32: bool = False,
        alpha_upsampler: str = 'realesrgan',
        suffix: str = 'out',
        gpu_id: Optional[int] = None,
        num_processes: Optional[int] = None,
        gfpgan_model_path: Optional[str] = None,
        progress_callback: Optional[Callable[[int], None]] = None,
        stop_callback: Optional[Callable[[], bool]] = None  # –î–æ–±–∞–≤–ª–µ–Ω callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Real-ESRGAN.

    :param stop_callback: –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    """
    print("üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(output_path, exist_ok=True)
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    if os.path.isfile(input_path):
        paths = [input_path]
    else:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        supported_extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.tif', '*.tiff')
        paths = []
        for ext in supported_extensions:
            paths.extend(glob.glob(os.path.join(input_path, ext)))
        paths = sorted(paths)
    total_images = len(paths)
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    if total_images == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if num_processes is None:
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–¥–∏–Ω GPU, –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ 1
        num_gpus = torch.cuda.device_count()
        if num_gpus <= 1:
            num_processes = 1
        else:
            num_processes = min(cpu_count(), num_gpus)
    else:
        num_processes = min(num_processes, cpu_count())

    print(f"‚öôÔ∏è –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {num_processes} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

    # –ï—Å–ª–∏ face_enhance=True –∏ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if face_enhance and gfpgan_model_path is None:
        gfpgan_model_path = os.path.join(model_folder, 'GFPGANv1.3.pth')

    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    manager = Manager()
    shared_stop_flag = manager.Value('b', False)  # 'b' –¥–ª—è boolean

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    pool = Pool(
        processes=num_processes,
        initializer=init_worker,
        initargs=(model_folder, model_name, denoise_strength,
                  outscale, tile, tile_pad, pre_pad,
                  face_enhance, fp32, alpha_upsampler, gpu_id,
                  gfpgan_model_path if face_enhance else None,
                  shared_stop_flag)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    )

    args = [(path, idx) for idx, path in enumerate(paths)]
    processed = 0
    results = []

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    def update_progress(_):
        nonlocal processed
        processed += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ callback
        if stop_callback and stop_callback():
            shared_stop_flag.value = True
            print("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        if progress_callback:
            progress = int((processed / total_images) * 100)
            result = progress_callback(progress)
            # –ï—Å–ª–∏ callback –≤–µ—Ä–Ω—É–ª -1, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            if result == -1:
                shared_stop_flag.value = True
                print("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ progress_callback")

    partial_process = partial(
        process_single_image,
        output_path=output_path,
        suffix=suffix,
        outscale=outscale,
        face_enhance=face_enhance
    )

    try:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        for path_idx in args:
            result = pool.apply_async(
                partial_process,
                args=(path_idx,),
                callback=update_progress
            )
            results.append(result)

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while results:
            completed = []
            for i, result in enumerate(results):
                if result.ready():
                    completed.append(i)
                elif shared_stop_flag.value or (stop_callback and stop_callback()):
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª
                    shared_stop_flag.value = True
                    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                    pool.terminate()
                    pool.join()
                    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    return -1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for i in reversed(completed):
                results.pop(i)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU
            import time
            time.sleep(0.1)

        pool.close()
        pool.join()

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        pool.terminate()
        pool.join()
        return -1
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—É–ª –∑–∞–∫—Ä—ã—Ç
        try:
            pool.close()
            pool.join()
        except:
            pass

    print("üîç –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return 0  # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ


if __name__ == '__main__':
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    input_path = 'C:\\Users\\Matve\\Desktop\\–¢–µ—Å—Ç'
    output_path = 'D:\\PyCharmProject\\GraphicNovelCleaner\\GraphicNovelCleaner+\\13. MangaLocalizer\\data\\output'

    enhance_image(
        input_path=input_path,
        output_path=output_path,
        model_folder=os.path.join(os.path.dirname(__file__), 'RealESRGAN'),
        model_name='RealESRGAN_x4plus_anime_6B',
        denoise_strength=0.5,
        outscale=4.0,
        tile=256,
        tile_pad=10,
        pre_pad=0,
        face_enhance=True,
        fp32=False,
        alpha_upsampler='realesrgan',
        suffix='enhanced',
        gpu_id=0,
        num_processes=1,
        gfpgan_model_path=None,
        progress_callback=lambda p: print(f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {p}%")
    )