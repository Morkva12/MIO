import os
import glob
import numpy as np
from PIL import Image
from typing import Optional, List
from multiprocessing import Pool, cpu_count
from functools import partial
import requests  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ GFPGAN –∏ Real-ESRGAN

import torch  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

from basicsr.archs.rrdbnet_arch import RRDBNet
from basicsr.archs.srvgg_arch import SRVGGNetCompact
from realesrgan import RealESRGANer

# –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ GFPGAN –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü
from gfpgan import GFPGANer

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è upsampler –∏ face_enhancer
upsampler = None
face_enhancer = None

def download_gfpgan_model(model_path: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å GFPGAN, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    url = "https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
    print(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ GFPGAN —Å {url}...")
    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(model_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å GFPGAN —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {model_path}")
    else:
        raise RuntimeError(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å GFPGAN —Å {url}. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")

def download_realesrgan_model(model_path: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Real-ESRGAN, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    url = "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.5/RealESRGAN_x4plus_anime_6B.pth"
    print(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Real-ESRGAN —Å {url}...")
    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(model_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å Real-ESRGAN —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {model_path}")
    else:
        raise RuntimeError(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å Real-ESRGAN —Å {url}. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")

def init_worker(model_folder: str, model_name: str, denoise_strength: float,
               outscale: float, tile: int, tile_pad: int, pre_pad: int,
               face_enhance: bool, fp32: bool, alpha_upsampler: str,
               gpu_id: Optional[int], gfpgan_model_path: Optional[str]):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç RealESRGANer –∏ GFPGANer (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).
    """
    global upsampler
    global face_enhancer

    print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –º–æ–¥–µ–ª—å—é {model_name} –Ω–∞ GPU {gpu_id}...")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏
    model_path = os.path.join(model_folder, f'{model_name}.pth')
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –ø–æ –ø—É—Ç–∏: {model_path}")  # –î–æ–±–∞–≤–ª–µ–Ω–æ

    if not os.path.isfile(model_path):
        if model_name == 'RealESRGAN_x4plus_anime_6B':
            print(f"üö´ –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ {model_folder}. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
            download_realesrgan_model(model_path)
        else:
            raise FileNotFoundError(f"üö´ –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ {model_folder}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –º–∞—Å—à—Ç–∞–±–∞
    if model_name == 'RealESRGAN_x4plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        netscale = 4
    elif model_name == 'RealESRNet_x4plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        netscale = 4
    elif model_name == 'RealESRGAN_x4plus_anime_6B':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=6, num_grow_ch=32, scale=4)
        netscale = 4
    elif model_name == 'RealESRGAN_x2plus':
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=2)
        netscale = 2
    elif model_name == 'realesr-animevideov3':
        model = SRVGGNetCompact(num_in_ch=3, num_out_ch=3, num_feat=64, num_conv=16, upscale=4, act_type='prelu')
        netscale = 4
    elif model_name == 'realesr-general-x4v3':
        model = SRVGGNetCompact(num_in_ch=3, num_out_ch=3, num_feat=64, num_conv=32, upscale=4, act_type='prelu')
        netscale = 4
    else:
        raise ValueError(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏: {model_name}")

    # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∏–ª—ã —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
    dni_weight: Optional[List[float]] = None
    if model_name == 'realesr-general-x4v3' and denoise_strength != 1:
        wdn_model_name = 'realesr-general-wdn-x4v3'
        wdn_model_path = os.path.join(model_folder, f'{wdn_model_name}.pth')
        if not os.path.isfile(wdn_model_path):
            raise FileNotFoundError(f"üö´ –ú–æ–¥–µ–ª—å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è {wdn_model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ {model_folder}")
        model_path_updated = [model_path, wdn_model_path]
        dni_weight = [denoise_strength, 1 - denoise_strength]
    else:
        model_path_updated = model_path

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RealESRGANer
    try:
        upsampler = RealESRGANer(
            scale=netscale,
            model_path=model_path_updated,
            dni_weight=dni_weight,
            model=model,
            tile=tile,
            tile_pad=tile_pad,
            pre_pad=pre_pad,
            half=not fp32,
            gpu_id=gpu_id,
            # –î–æ–±–∞–≤—å—Ç–µ weights_only=True, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            # weights_only=True
        )
        print("üñ•Ô∏è RealESRGANer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RealESRGANer: {e}")
        raise e

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GFPGAN –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if face_enhance:
        if gfpgan_model_path is None:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            gfpgan_model_path = os.path.join(model_folder, 'GFPGANv1.3.pth')
        if not os.path.isfile(gfpgan_model_path):
            print(f"üö´ –ú–æ–¥–µ–ª—å GFPGAN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {gfpgan_model_path}. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
            download_gfpgan_model(gfpgan_model_path)
        print("üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GFPGAN –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü...")
        try:
            face_enhancer = GFPGANer(
                model_path=gfpgan_model_path,
                upscale=outscale,
                arch='clean',
                channel_multiplier=2,
                bg_upsampler=upsampler
            )
            print("üñ•Ô∏è GFPGANer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GFPGANer: {e}")
            raise e

def process_single_image(path: str, idx: int, output_path: str,
                        suffix: str, outscale: float, face_enhance: bool):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –ø–æ–≤—ã—à–∞–µ—Ç –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    global upsampler
    global face_enhancer

    imgname, extension = os.path.splitext(os.path.basename(path))
    print(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ {idx + 1}: {imgname}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PIL –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ NumPy –º–∞—Å—Å–∏–≤
    try:
        img = Image.open(path).convert('RGB')
        img_np = np.array(img)
        print(f"üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {path}: {e}")
        return

    try:
        if face_enhance and face_enhancer is not None:
            print("üîç –£–ª—É—á—à–µ–Ω–∏–µ –ª–∏—Ü —Å –ø–æ–º–æ—â—å—é GFPGAN...")
            _, _, output = face_enhancer.enhance(img_np, has_aligned=False, only_center_face=False, paste_back=True)
        else:
            print("‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Real-ESRGAN...")
            output, _ = upsampler.enhance(img_np, outscale=outscale)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è: {imgname}")
    except RuntimeError as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {imgname}: {error}")
        print('üí° –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π CUDA out of memory, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞.')
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if suffix:
        save_extension = extension[1:] if extension else 'png'
        save_filename = f"{imgname}_{suffix}.{save_extension}"
    else:
        save_extension = extension[1:] if extension else 'png'
        save_filename = f"{imgname}.{save_extension}"

    save_path = os.path.join(output_path, save_filename)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PIL
    try:
        output_img = Image.fromarray(output)
        output_img.save(save_path)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {save_path}: {e}")

def enhance_image(
    input_path: str,
    output_path: str,
    model_folder: str,
    model_name: str = 'RealESRGAN_x4plus_anime_6B',
    denoise_strength: float = 0.5,
    outscale: float = 4.0,
    tile: int = 0,
    tile_pad: int = 10,
    pre_pad: int = 0,
    face_enhance: bool = False,
    fp32: bool = False,
    alpha_upsampler: str = 'realesrgan',
    suffix: str = 'out',
    gpu_id: Optional[int] = None,
    num_processes: Optional[int] = None,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∏—Å–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    gfpgan_model_path: Optional[str] = None  # –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ GFPGAN
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Real-ESRGAN.

    :param input_path: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
    :param output_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    :param model_folder: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏ Real-ESRGAN.
    :param model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'RealESRGAN_x4plus_anime_6B').
    :param denoise_strength: –°–∏–ª–∞ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ–ª–∏ 'realesr-general-x4v3').
    :param outscale: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.
    :param tile: –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è).
    :param tile_pad: –û—Ç—Å—Ç—É–ø —Ç–∞–π–ª–∞.
    :param pre_pad: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø.
    :param face_enhance: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ GFPGAN –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–∏—Ü.
    :param fp32: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å fp32 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fp16).
    :param alpha_upsampler: –ê–ø—Å–µ–º–ø–ª–µ—Ä –¥–ª—è –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–≤ ('realesrgan' –∏–ª–∏ 'bicubic').
    :param suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    :param gpu_id: ID GPU –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None).
    :param num_processes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∏—Å–ª–æ CPU).
    :param gfpgan_model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ GFPGAN (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ face_enhance=True).
    """
    print("üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(output_path, exist_ok=True)
    print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    if os.path.isfile(input_path):
        paths = [input_path]
    else:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        supported_extensions = ('*.png', '*.jpg', '*.jpeg', '*.bmp', '*.tif', '*.tiff')
        paths = []
        for ext in supported_extensions:
            paths.extend(glob.glob(os.path.join(input_path, ext)))
        paths = sorted(paths)
    total_images = len(paths)
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    if total_images == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if num_processes is None:
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–¥–∏–Ω GPU, –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ 1
        num_gpus = torch.cuda.device_count()
        if num_gpus <= 1:
            num_processes = 1
        else:
            num_processes = min(cpu_count(), num_gpus)
    else:
        num_processes = min(num_processes, cpu_count())

    print(f"‚öôÔ∏è –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {num_processes} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

    # –ï—Å–ª–∏ face_enhance=True –∏ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if face_enhance and gfpgan_model_path is None:
        gfpgan_model_path = os.path.join(model_folder, 'GFPGANv1.3.pth')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    pool = Pool(
        processes=num_processes,
        initializer=init_worker,
        initargs=(model_folder, model_name, denoise_strength,
                  outscale, tile, tile_pad, pre_pad,
                  face_enhance, fp32, alpha_upsampler, gpu_id, gfpgan_model_path if face_enhance else None)
    )

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        partial_process = partial(
            process_single_image,
            output_path=output_path,
            suffix=suffix,
            outscale=outscale,
            face_enhance=face_enhance
        )

        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        pool.starmap(
            partial_process,
            [(path, idx) for idx, path in enumerate(paths)]
        )
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    finally:
        pool.close()
        pool.join()

    print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == '__main__':
    enhance_image(
        input_path=r"C:\Users\Matve\Desktop\–¢–µ—Å—Ç",  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        output_path=r"D:\PyCharmProject\GraphicNovelCleaner\GraphicNovelCleaner+\13. MangaLocalizer\data\output",  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        model_folder=r"D:\PyCharmProject\GraphicNovelCleaner\GraphicNovelCleaner+\13. MangaLocalizer\data\model\Real-ESRGAN",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
        model_name='RealESRGAN_x4plus_anime_6B',  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        denoise_strength=0.5,  # –°–∏–ª–∞ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏)
        outscale=2,  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4)
        tile=256,  # –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
        tile_pad=10,  # –û—Ç—Å—Ç—É–ø —Ç–∞–π–ª–∞
        pre_pad=0,  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
        face_enhance=True,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –ª–∏—Ü–∞
        fp32=False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fp16 —Ç–æ—á–Ω–æ—Å—Ç—å
        alpha_upsampler='realesrgan',  # –ê–ø—Å–µ–º–ø–ª–µ—Ä –¥–ª—è –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–≤
        suffix='enhanced',  # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        gpu_id=0,  # ID –≤–∞—à–µ–≥–æ GPU –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
        num_processes=1,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ 1 –¥–ª—è –æ–¥–Ω–æ–≥–æ GPU
        gfpgan_model_path=r"D:\PyCharmProject\GraphicNovelCleaner\GraphicNovelCleaner+\13. MangaLocalizer\data\model\Real-ESRGAN\GFPGANv1.3.pth"  # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ GFPGAN
    )
